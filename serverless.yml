service: step-fn
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ap-south-1
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource: arn:aws:dynamodb:ap-south-1:319821721090:table/bookTable
    - Effect: Allow
      Action: dynamodb:*
      Resource: arn:aws:dynamodb:ap-south-1:319821721090:table/userTable
    - Effect: Allow
      Action: sns:*
      Resource: arn:aws:sns:ap-south-1:319821721090:NotifyCourier
    - Effect: Allow
      Action: sqs:*
      Resource: arn:aws:sqs:ap-south-1:319821721090:OrdersQueue
    - Effect: Allow
      Action: states:*
      Resource: arn:aws:states:ap-south-1:319821721090:stateMachine:storeCheckoutFlow

plugins:
  - serverless-step-functions

functions:
  checkInventory:
    handler: handler.checkInventory
  calculateTotal:
    handler: handler.calculateTotal
  redeemPoints:
    handler: handler.redeemPoints
  billCustomer:
    handler: handler.billCustomer
  prepareOrder:
    handler: handler.prepareOrder
  restoreRedeemPoints:
    handler: handler.restoreRedeemPoints
  restoreQuantity:
    handler: handler.restoreQuantity
  sqsWorker:
    handler: handler.sqsWorker
    events:
      - sqs:
          arn: arn:aws:sqs:ap-south-1:319821721090:OrdersQueqe
          batchSize: 1

stepFunctions:
  stateMachines:
    storeCheckoutFlow:
      name: storeCheckoutFlow
      definition:
        StartAt: checkInventory
        States:
          checkInventory:
            Type: Task
            Resource:
              Fn::GetAtt: [checkInventory, Arn]
            Catch:
              - ErrorEquals:
                  - BookNotFound
                Next: BookNotFoundError
              - ErrorEquals:
                  - BookOutOfStock
                Next: BookOutStockError
            ResultPath: '$.book'
            Next: calculateTotal

          calculateTotal:
            Type: Task
            Resource:
              Fn::GetAtt: [calculateTotal, Arn]
            ResultPath: '$.total'
            Next: isRedeemNeeded
          isRedeemNeeded:
            Type: Choice
            Choices:
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoints
            Default: BillCustomer

          RedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [redeemPoints, Arn]
            ResultPath: '$.total'
            Catch:
              - ErrorEquals:
                  - States_ALL
                Next: RedeemPointsError
            Next: BillCustomer

          BillCustomer:
            Type: Task
            Resource:
              Fn::GetAtt: [billCustomer, Arn]
            ResultPath: '$.billingStatus'
            Retry:
              - ErrorEquals:
                  - States_ALL
                MaxAttempts: 3
            Catch:
              - ErrorEquals:
                  - States_ALL
                ResultPath: '$.customerBilling'
                Next: BillCustomerError
            Next: PrepareOrder

          PrepareOrder:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl: https://sqs.ap-south-1.amazonaws.com/319821721090/OrdersQueqe
              MessageBody:
                Input.$: '$'
                Token.$: '$$.Task.Token' #From the context
            ResultPath: '$.courierStatus'
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: '$.courierError'
                Next: RefundCustomer
            Next: DispatchOrder

          DispatchOrder:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: arn:aws:sns:ap-south-1:319821721090:NotifyCourier
              Message.$: '$'
            Next: Dispatched

          Dispatched:
            Type: Pass
            Result: 'Your order will be dispatched in 24 hours'
            End: true

          RedeemPointsError:
            Type: Pass
            Result: 'Error in redeem points'
            End: true

          RestoreQuantity:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreQuantity, Arn]
            ResultPath: '$.quantityRestoreStatus'
            Next: RestoreRedeemPoints

          RefundCustomer:
            Type: Pass
            Result: 'Customer is refunded'
            ResultPath: '$.refundStatus'
            Next: RestoreQuantity

          BillCustomerError:
            Type: Pass
            Result: 'Error while billing'
            ResultPath: '$.billingStatus'
            Next: RestoreRedeemPoints

          BookNotFoundError:
            Type: Pass
            Result: 'No such book available'
            End: true

          BookOutStockError:
            Type: Pass
            Result: 'Sorry, the book is out of stock'
            End: true

          RestoreRedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreRedeemPoints, Arn]
            End: true
